{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Question 5\n",
      "\n",
      "Test Error: 106.38375849934768\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "from matplotlib import pyplot as plt\n",
    "from data_utils import load_dataset\n",
    "\n",
    "\n",
    "# ALVIN PANE [1004281118]\n",
    "\n",
    "# ROB313\n",
    "\n",
    "#Q1 done on paper\n",
    "Q2 = False\n",
    "Q3 = False\n",
    "Q4 = False\n",
    "Q5 = True\n",
    "\n",
    "#Q2 code ****************************************************************\n",
    "\n",
    "def testGLM(x_train, x_valid, x_test, y_train, y_valid, y_test, lambda_):\n",
    "\n",
    "    x_total = np.vstack([x_train, x_valid])\n",
    "    y_total = np.vstack([y_train, y_valid])\n",
    "    \n",
    "    s = (len(x_total), 7)\n",
    "    phi = np.empty(s)\n",
    "    for i in range(len(x_total)):\n",
    "        phi[i, :] = basisvector(x_total[i]) #phi matrix training\n",
    "\n",
    "    s2 = (len(x_test), 7)\n",
    "    testphi = np.empty(s2)\n",
    "    for i in range(len(x_test)):\n",
    "        testphi[i, :] = basisvector(x_test[i]) #phi matrix test\n",
    "\n",
    "    #SVD\n",
    "    U, S, D = np.linalg.svd(phi)\n",
    "    sig = np.diag(S)\n",
    "    fillzeros = np.zeros([len(x_total) - len(S), len(S)])\n",
    "    sig = np.vstack([sig, fillzeros])\n",
    "\n",
    "    #get predictions\n",
    "    t0 = np.dot(sig.T, sig)\n",
    "    t1 = np.linalg.inv(t0 + lambda_ * np.eye(len(t0)))\n",
    "    w = np.dot(D.T, np.dot(t1, np.dot(sig.T, np.dot(U.T, y_total))))\n",
    "    pred = np.dot(testphi, w)\n",
    "\n",
    "    plt.plot(x_test, y_test, '-g', label='Actual')\n",
    "    plt.plot(x_test, pred, '-r', label='Predicted')\n",
    "    plt.title('GLM for Mauna Loa at lambda=' + str(lambda_))\n",
    "    plt.xlabel('x test')\n",
    "    plt.ylabel('y')\n",
    "    plt.legend(loc='upper left')\n",
    "    plt.savefig('maunaloa_glm2.png')\n",
    "    \n",
    "    testerror = rms_err(y_test, pred)\n",
    "\n",
    "    return testerror\n",
    "\n",
    "def validateGLM(x_train, x_valid, y_train, y_valid):\n",
    "\n",
    "    maxlambda = 21 #loop over parameters from 0 to 20\n",
    "\n",
    "    s2 = (len(x_valid), 7)\n",
    "    phival = np.empty(s2)\n",
    "    i=0\n",
    "    while i<len(x_valid):\n",
    "        phival[i, :] = basisvector(x_valid[i])  #phi matrix validation\n",
    "        i+=1\n",
    "    \n",
    "    s = (len(x_train), 7)\n",
    "    phi = np.empty(s)\n",
    "    i=0\n",
    "    while i < len(x_train):\n",
    "        phi[i, :] = basisvector(x_train[i]) #phi matrix training\n",
    "        i+=1\n",
    "        \n",
    "    #SVD\n",
    "    U, S, D = np.linalg.svd(phi)\n",
    "    sig = np.diag(S)\n",
    "    fillzeros = np.zeros([len(x_train) - len(S), len(S)])\n",
    "    sig = np.vstack([sig, fillzeros])\n",
    "\n",
    "    #get optimal lambda\n",
    "    min_rmse = 1000000\n",
    "    l=0\n",
    "    while l < maxlambda:\n",
    "        t0 = np.dot(sig.T, sig)\n",
    "        t1 = np.linalg.inv(t0 + l*np.eye(len(t0)))\n",
    "\n",
    "        w = np.dot(D.T, np.dot(t1, np.dot(sig.T, np.dot(U.T, y_train))))\n",
    "        #weight\n",
    "        predictions = np.dot(phival, w)\n",
    "        rmse_val = rms_err(y_valid, predictions)\n",
    "\n",
    "        if rmse_val < min_rmse:\n",
    "            min_rmse = rmse_val\n",
    "            bestlambda = l\n",
    "        l+=1\n",
    "\n",
    "    return bestlambda\n",
    "\n",
    "#general functions to be used multiple times\n",
    "\n",
    "def RBF(x0, x1, theta):\n",
    "    return math.exp(-((euclid(x0, x1))**2)/theta)\n",
    "\n",
    "# Error function root mean square\n",
    "def rms_err(y_t, y_e):  \n",
    "    return np.sqrt(np.average((y_t-y_e)**2))\n",
    "\n",
    "#euclidean distance\n",
    "def euclid(x1, x2):    #l2 norm\n",
    "    return np.linalg.norm([x1-x2], ord=2)\n",
    "\n",
    "#kernelized inner product\n",
    "def kernelizeIP(x1, x2):\n",
    "    return (1+x1*x2)**2 + x1*x2*math.cos(111.15*(x1-x2))\n",
    "\n",
    "#create a basis function vector\n",
    "def basisvector(x):\n",
    "    w=111.15\n",
    "    vector = list()\n",
    "    vector.append(1)\n",
    "    vector.append(x)\n",
    "    vector.append(x**2)\n",
    "    vector.append(x**3)\n",
    "    vector.append(x**4)\n",
    "    vector.append(x * math.sin(w * x))\n",
    "    vector.append(x * math.cos(w * x))\n",
    "    return np.array(vector)\n",
    "\n",
    "#Q4 code\n",
    "\n",
    "def Q4test(x_train, x_valid, x_test, y_train, y_valid, y_test, lambda_val, theta, dataset):\n",
    "\n",
    "    x_total = np.vstack([x_train, x_valid])\n",
    "    y_total = np.vstack([y_train, y_valid])\n",
    "    s = (len(x_total), len(x_total))\n",
    "    K = np.empty(s)  \n",
    "    prev = {}  \n",
    "    for i in range(len(x_total)):\n",
    "        for j in range(len(x_total)):\n",
    "            x = x_total[i]\n",
    "            y = x_total[j]\n",
    "            if str((x, y)) not in prev:\n",
    "                prev[str((x, y))] = RBF(x, y, theta)\n",
    "                prev[str((y, x))] = prev[str((x, y))]\n",
    "            K[i, j] = prev[str((x, y))] #add if not in prev\n",
    "    #print('end of Q4 test for loop 1')\n",
    "    kk = np.empty((len(x_test), len(x_total)))\n",
    "    for i in range(len(x_test)):\n",
    "        k = list()\n",
    "        vector = x_test[i]\n",
    "        for j in range(len(x_total)):\n",
    "            k.append(RBF(vector, x_total[j], theta))\n",
    "        kk[i, :] = np.array(k)\n",
    "        \n",
    "    #cholesky\n",
    "    R = np.linalg.cholesky((K + lambda_val * np.eye(len(K))))\n",
    "    Ri = np.linalg.inv(R)\n",
    "\n",
    "    alpha = np.dot(np.dot(Ri.T, Ri), y_total)\n",
    "\n",
    "    if dataset == 'mauna_loa' :\n",
    "        predictions = np.dot(kk, alpha) #dot product\n",
    "        test_rmse = rms_err(y_test, predictions) #compute error\n",
    "        \n",
    "    elif dataset == 'rosenbrock':\n",
    "        predictions = np.dot(kk, alpha) #dot product\n",
    "        test_rmse = rms_err(y_test, predictions) #compute error\n",
    "\n",
    "    else:\n",
    "        predictions = np.argmax(np.dot(kk, alpha), axis=1)\n",
    "        y_test = np.argmax(1 * y_test, axis=1)\n",
    "        test_rmse = (predictions == y_test).sum() / len(y_test)\n",
    "\n",
    "    return test_rmse\n",
    "\n",
    "def Q4valid(x_train, x_valid, y_train, y_valid, dataset):\n",
    "\n",
    "    theta_vals = [0.05, 0.1, 0.5, 1, 2]\n",
    "    lambda_vals = [0.001, 0.01, 0.1, 1]\n",
    "    result = {}\n",
    "    r = 0\n",
    "    while r<len(theta_vals):\n",
    "        #print('first while')\n",
    "        theta = theta_vals[r]\n",
    "        s = (len(x_train), len(x_train))\n",
    "        K = np.empty(s)                 \n",
    "        prev = {}                  \n",
    "        for i in range(len(x_train)):\n",
    "            #print('first for')\n",
    "            for j in range(len(x_train)):\n",
    "                x = x_train[i]\n",
    "                y = x_train[j]\n",
    "                if str((x, y)) not in prev:\n",
    "                    prev[str((x, y))] = RBF(x, y, theta)\n",
    "                    prev[str((y, x))] = prev[str((x, y))]\n",
    "                K[i, j] = prev[str((x, y))]\n",
    "        kk = np.empty((len(x_valid), len(x_train)))\n",
    "        for i in range(len(x_valid)):\n",
    "            #print('second for')\n",
    "            vector = x_valid[i]\n",
    "            k = list()\n",
    "            for j in range(len(x_train)):\n",
    "                k.append(RBF(vector, x_train[j], theta))\n",
    "            kk[i, :] = np.array(k)\n",
    "\n",
    "        for lambda_ in lambda_vals:\n",
    "            #print('third 4')\n",
    "            #cholesky\n",
    "            R = np.linalg.cholesky((K + lambda_ * np.eye(len(K))))\n",
    "            Ri = np.linalg.inv(R)\n",
    "            alpha = np.dot(np.dot(Ri.T, Ri), y_train)\n",
    "\n",
    "            if dataset == 'mauna_loa' or dataset == 'rosenbrock':\n",
    "                predictions = np.dot(kk, alpha)\n",
    "                result[(theta, lambda_)] = rms_err(y_valid, predictions)\n",
    "\n",
    "            else:\n",
    "                predictions = np.argmax(np.dot(kk, alpha), axis=1)\n",
    "                y_valid0 = np.argmax(1 * y_valid, axis=1)\n",
    "                result[(theta, lambda_)] = (predictions == y_valid0).sum() / len(y_valid0)\n",
    "        r=r+1\n",
    "    #print('end of first while')   \n",
    "    #loop and determine optimal theta and lambda\n",
    "    if dataset == 'mauna_loa' :\n",
    "        err = 1000000  #minimize rmse\n",
    "        for theta, lambda_ in result:\n",
    "            if result[(theta, lambda_)] < err:\n",
    "                err = result[(theta, lambda_)]\n",
    "                besttheta = theta\n",
    "                bestlambda = lambda_             \n",
    "    elif dataset == 'rosenbrock':\n",
    "        err = 1000000  #minimize rmse\n",
    "        for theta, lambda_ in result:\n",
    "            if result[(theta, lambda_)] < err:\n",
    "                err = result[(theta, lambda_)]\n",
    "                besttheta = theta\n",
    "                bestlambda = lambda_        \n",
    "    else: #for iris, want to maximize test ratio\n",
    "        err = -1000000\n",
    "        for theta, lambda_ in result:\n",
    "            if result[(theta, lambda_)] > err:\n",
    "                err = result[(theta, lambda_)]\n",
    "                besttheta = theta\n",
    "                bestlambda = lambda_\n",
    "\n",
    "    return besttheta, bestlambda\n",
    "\n",
    "\n",
    "#Q3 Code *************************************************\n",
    "\n",
    "def kernelizedGLM(x_train, x_valid, x_test, y_train, y_valid, y_test, lambda_):\n",
    "    \n",
    "    x_total = np.vstack([x_train, x_valid])\n",
    "    y_total = np.vstack([y_train, y_valid])\n",
    "    s = (len(x_total), len(x_total))\n",
    "    K = np.empty(s) #this will be the gram matrix\n",
    "    prev = {}                          \n",
    "    for i in range(len(x_total)):\n",
    "        for j in range(len(x_total)):\n",
    "            x = x_total[i]\n",
    "            y = x_total[j]\n",
    "            if str((x, y)) not in prev:\n",
    "                prev[str((x, y))] = kernelizeIP(x, y)\n",
    "                prev[str((y, x))] = prev[str((x, y))]\n",
    "            K[i, j] = prev[str((x, y))]  #if not in prev add to Gram\n",
    "    #cholesky\n",
    "    R = np.linalg.cholesky((K + lambda_*np.eye(len(K))))\n",
    "    Ri = np.linalg.inv(R)\n",
    "    alpha = np.dot(np.dot(Ri.T, Ri), y_total)\n",
    "    predictions = np.empty(np.shape(y_test))\n",
    "    for i in range(len(x_test)):\n",
    "        k = np.empty(np.shape(alpha)) #kernel\n",
    "        for j in range(len(x_total)):\n",
    "            k[j] = kernelizeIP(x_test[i], x_total[j])\n",
    "        predictions[i] = np.dot(k.T, alpha)  #store predictions\n",
    "\n",
    "    plt.figure(2)\n",
    "    plt.plot(x_test, y_test, '-g', label='Actual')\n",
    "    plt.plot(x_test, predictions, '-r', label='Predicted')\n",
    "    plt.title('Mauna Loa Kernelized Predictions')\n",
    "    plt.legend(loc='lower right')\n",
    "    plt.ylabel('y')\n",
    "    plt.xlabel('x_test')\n",
    "    i=0\n",
    "    while i<2:\n",
    "        y_vals = list()\n",
    "        z = np.linspace(-0.1 + i, 0.1 + i, 100) #bounds\n",
    "        z = np.array(z)\n",
    "        for elem in z:\n",
    "            y_vals.append(kernelizeIP(i, elem))\n",
    "        plt.figure(i + 3)\n",
    "        plt.plot(z, y_vals, '-r', label='kernel')\n",
    "        plt.title('kernel(' + str(i) + ', z+' + str(i) + ') over z')\n",
    "        plt.ylabel('k')\n",
    "        plt.xlabel('z')\n",
    "        i+=1\n",
    "       \n",
    "    test_rmse = rms_err(y_test, predictions)\n",
    "    \n",
    "    return test_rmse\n",
    "\n",
    "#Q5 Code ******************************************************************\n",
    "\n",
    "def orthogonalmatching(x_train,y_train,theta,kk):\n",
    "    res=-1*y_train\n",
    "    options=np.zeros((len(x_train),len(x_train)))\n",
    "    for i in range(0,len(x_train)):\n",
    "            options[i]=np.exp(-1*(np.linalg.norm(x_train-x_train[i],axis=1)**2)/theta)\n",
    "    fn=np.array([])\n",
    "    w=np.array([])\n",
    "    kvals=[]\n",
    "    MDL=[]\n",
    "    k=1\n",
    "    i=0\n",
    "    while i<kk:\n",
    "        fn,w=helper(x_train,y_train,options,selected,res,w,theta)\n",
    "        minus=np.zeros((len(x_train),len(fn)))\n",
    "        for j in range(0,len(x_train)):\n",
    "            minus[j]=np.exp(-1*(np.linalg.norm(fn-x_train[j],axis=1)**2)/theta)\n",
    "        res=y_train-np.dot(minus,w)\n",
    "        MDL.append(0.5*len(x_train)*np.log(np.sum(np.square(res)))+0.5*k*np.log(len(x_train)))\n",
    "        kvals.append(k)\n",
    "        k=k+1\n",
    "        i=i+1\n",
    "    K=np.zeros((len(x_test),len(fn)))\n",
    "    i=0\n",
    "    while i<len(x_test):\n",
    "        j=0\n",
    "        while j <len(fn):\n",
    "            K[i][j]=np.sum(np.square(np.subtract(x_test[i],fn[j])))   \n",
    "            j=j+1\n",
    "        i=i+1\n",
    "    test_K=np.exp(-1*K/theta)\n",
    "    pred=np.dot(test_K,w)\n",
    "    plt.plot(np.array(kvals),np.array(MDL), '-g', label='MDL Val')\n",
    "    plt.title(\"Complexity (k) vs MDL Value\")\n",
    "    plt.xlabel(\"Complexity (k)\")\n",
    "    plt.ylabel(\"Minimum Description Length Value\")\n",
    "    \n",
    "    err=rms_err(y_test,pred)\n",
    "    \n",
    "    return err\n",
    "    \n",
    "def helper(x_train,y_train,options,fn,res,w,theta):\n",
    "    prev=0\n",
    "    i=0\n",
    "    while i<len(options[0]):\n",
    "        update=(np.dot(res.transpose(),options[:,i].transpose())**2)/(np.dot(options[:,i],options[:,i].transpose()))\n",
    "        if(update[0]>prev):\n",
    "            prev=update[0]\n",
    "            idx=i\n",
    "        i=i+1\n",
    "    if(len(w)==0):\n",
    "        fn=np.array(np.array(x_train[np.where(options[:,idx]==1)]))\n",
    "    else:\n",
    "        fn=np.vstack((fn,x_train[np.where(options[:,idx]==1)]))\n",
    "    phi=np.zeros((len(x_train),len(fn)))\n",
    "    #use qr factorization this time\n",
    "    i=0\n",
    "    while i<len(x_train):\n",
    "            phi[i]=np.exp(-1*(np.linalg.norm(fn-x_train[i],axis=1)**2)/theta)\n",
    "            i=i+1\n",
    "    q,r=np.linalg.qr(phi)\n",
    "    w=np.dot(np.linalg.inv(r),np.dot(q.transpose(),y_train))\n",
    "    options=np.delete(options,idx,1)\n",
    "    return fn,w\n",
    "\n",
    "\n",
    "#MAIN**********************************************\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    regression = ['mauna_loa', 'rosenbrock', 'pumadyn32nm']\n",
    "    classification = ['iris', 'mnist_small']\n",
    "    \n",
    "if Q2:\n",
    "\n",
    "    print('Question 2')\n",
    "    print('')\n",
    "    x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('mauna_loa')\n",
    "    lambda_ = validateGLM(x_train, x_valid, y_train, y_valid)\n",
    "    test_rmse = testGLM(x_train, x_valid, x_test, y_train, y_valid, y_test, lambda_)\n",
    "    print('Optimal Lambda: ' + str(lambda_))\n",
    "    print('Test RMSE: ' + str(test_rmse))\n",
    "    print('')\n",
    "    \n",
    "if Q3:\n",
    "\n",
    "    print('Question 3')\n",
    "    print('')\n",
    "    \n",
    "    x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('mauna_loa')\n",
    "    test_rmse = kernelizedGLM(x_train, x_valid, x_test, y_train, y_valid, y_test, 1)\n",
    "    \n",
    "    visualize_kernel()\n",
    "    \n",
    "    print('Test RMSE: ' + str(test_rmse))\n",
    "    print('')\n",
    "    \n",
    "if Q4: \n",
    "\n",
    "    print('Question 4')\n",
    "    print('')\n",
    "    \n",
    "    x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('rosenbrock', n_train=1000, d=2)\n",
    "    theta, reg = Q4valid(x_train, x_valid, y_train, y_valid, 'rosenbrock')\n",
    "    test_rmse = Q4test(x_train, x_valid, x_test, y_train, y_valid, y_test, reg, theta, 'rosenbrock')\n",
    "    print('Rosenbrock')\n",
    "    print('Optimal Theta: ' + str(theta))\n",
    "    print('Optimal Lambda: ' + str(reg))\n",
    "    print('Test Error: ' + str(test_rmse))\n",
    "    print('')\n",
    "    \n",
    "    x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('mauna_loa')\n",
    "    theta, reg = Q4valid(x_train, x_valid, y_train, y_valid, 'mauna_loa')\n",
    "    test_rmse = Q4test(x_train, x_valid, x_test, y_train, y_valid, y_test, reg, theta, 'mauna_loa')\n",
    "    print('Mauna Loa')\n",
    "    print('Optimal Theta: ' + str(theta))\n",
    "    print('Optimal Lambda: ' + str(reg))\n",
    "    print('Test Error: ' + str(test_rmse))\n",
    "    print('')\n",
    "\n",
    "\n",
    "    x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('iris')\n",
    "    theta, reg = Q4valid(x_train, x_valid, y_train, y_valid, 'iris')\n",
    "    test_ratio = Q4test(x_train, x_valid, x_test, y_train, y_valid, y_test, reg, theta, 'iris')\n",
    "    print('Iris')\n",
    "    print('Optimal Theta: ' + str(theta))\n",
    "    print('Optimal Lambda: ' + str(reg))\n",
    "    print('Test Accuracy Ratio: ' + str(test_ratio))\n",
    "    print('')\n",
    "    \n",
    "    \n",
    "if Q5:\n",
    "    \n",
    "    print('Question 5')\n",
    "    print('')\n",
    "    \n",
    "    x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('rosenbrock', n_train=200, d=2)\n",
    "    err =orthogonalmatching(np.vstack((x_train,x_valid)),np.vstack((y_train,y_valid)),0.1,1000)\n",
    "    print('Test Error: ' + str(err))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
